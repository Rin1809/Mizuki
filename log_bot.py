import discord
import os
import datetime
import psycopg2 
from dotenv import load_dotenv
import asyncio


# --- C·∫•u h√¨nh C∆° b·∫£n & Database ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')
ADMIN_USER_ID_STR = os.getenv('ADMIN_USER_ID') # L·∫•y ID Admin

# --- C·∫•u h√¨nh T·ª´ kh√≥a C·∫ßn Th√¥ng b√°o ---
# Th√™m b·∫•t k·ª≥ t·ª´ kh√≥a n√†o  mu·ªën theo d√µi
ALERT_KEYWORDS = ["admin", "rin", "misuzu", "Rin", "Mizusu", "ad", "Ad", "Admin"]
print(f"S·∫Ω c·∫£nh b√°o khi ph√°t hi·ªán c√°c t·ª´ kh√≥a: {ALERT_KEYWORDS}")

# --- Chuy·ªÉn ƒë·ªïi ID Admin ---
ADMIN_USER_ID = None
if ADMIN_USER_ID_STR:
    try:
        ADMIN_USER_ID = int(ADMIN_USER_ID_STR)
        print(f"ƒê√£ c·∫•u h√¨nh g·ª≠i DM t·ªõi Admin ID: {ADMIN_USER_ID}")
    except ValueError:
        print("L·ªñI: ADMIN_USER_ID kh√¥ng ph·∫£i l√† s·ªë h·ª£p l·ªá.")
else:
    print("C·∫¢NH B√ÅO: ADMIN_USER_ID ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. Bot s·∫Ω kh√¥ng th·ªÉ g·ª≠i DM.")

# Bi·∫øn to√†n c·ª•c
conn = None
cursor = None

# --- Kh·ªüi t·∫°o Bot Discord ---
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True 
intents.guilds = True


client = discord.Client(intents=intents)

# --- H√†m K·∫øt n·ªëi v√† Thi·∫øt l·∫≠p Database (Gi·ªØ nguy√™n) ---
async def setup_database():
    """K·∫øt n·ªëi ƒë·∫øn database v√† t·∫°o b·∫£ng discord_logs n·∫øu ch∆∞a t·ªìn t·∫°i."""
    global conn, cursor
    if not DATABASE_URL:
        print("L·ªñI: DATABASE_URL ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t.")
        return False
    try:
        print("ƒêang k·∫øt n·ªëi ƒë·∫øn PostgreSQL...")
        conn = psycopg2.connect(DATABASE_URL, connect_timeout=10)
        conn.autocommit = True
        cursor = conn.cursor()
        print("ƒê√£ k·∫øt n·ªëi PostgreSQL th√†nh c√¥ng.")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS discord_logs (
                message_id BIGINT PRIMARY KEY, timestamp TIMESTAMPTZ NOT NULL,
                server_id BIGINT, server_name TEXT, channel_id BIGINT, channel_name TEXT,
                author_id BIGINT, author_name TEXT, content TEXT, attachment_urls TEXT
            )
        """)
        print("B·∫£ng 'discord_logs' ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra/t·∫°o.")
        return True
    except psycopg2.OperationalError as e:
         print(f"L·ªñI DB: Kh√¥ng th·ªÉ k·∫øt n·ªëi (OperationalError): {e}")
         conn, cursor = None, None
         return False
    except psycopg2.Error as e:
        print(f"L·ªñI DB: Kh√¥ng th·ªÉ thi·∫øt l·∫≠p b·∫£ng discord_logs: {e}")
        if conn: conn.close()
        conn, cursor = None, None
        return False
    except Exception as e:
        print(f"L·ªñI kh√¥ng x√°c ƒë·ªãnh khi thi·∫øt l·∫≠p database: {e}")
        return False

async def close_database():
    """ƒê√≥ng k·∫øt n·ªëi database."""
    global conn, cursor
    if cursor: cursor.close(); print("ƒê√£ ƒë√≥ng con tr·ªè DB.")
    if conn: conn.close(); print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi DB.")
    conn, cursor = None, None

# --- H√†m Ghi Log v√†o Database  ---
def log_message_to_db_sync(message):
    """Ghi th√¥ng tin tin nh·∫Øn v√†o b·∫£ng discord_logs (phi√™n b·∫£n ƒë·ªìng b·ªô)."""
    global conn, cursor
    if conn is None or conn.closed != 0:
        print("C·∫¢NH B√ÅO: M·∫•t k·∫øt n·ªëi DB, kh√¥ng th·ªÉ ghi log tin nh·∫Øn.")
        return

    if not cursor or cursor.closed:
         try:
             cursor = conn.cursor() 
         except Exception as e:
             print(f"L·ªói khi t·∫°o l·∫°i cursor DB: {e}")
             return


    data = (
        message.id, message.created_at,
        message.guild.id if message.guild else None,
        message.guild.name if message.guild else 'Direct Message',
        message.channel.id,
        message.channel.name if hasattr(message.channel, 'name') else f'DM with {message.author}',
        message.author.id, str(message.author), message.content,
        ", ".join([att.url for att in message.attachments]) if message.attachments else None
    )
    sql = """
        INSERT INTO discord_logs (message_id, timestamp, server_id, server_name, channel_id,
        channel_name, author_id, author_name, content, attachment_urls)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (message_id) DO NOTHING;
    """
    try:
        cursor.execute(sql, data)
    except psycopg2.Error as e:
        print(f"L·ªñI DB khi ghi log msg {message.id}: {e}")
        # Kh√¥ng rollback n·∫øu autocommit
        # C√¢n nh·∫Øc ƒë√≥ng v√† m·ªü l·∫°i k·∫øt n·ªëi n·∫øu l·ªói nghi√™m tr·ªçng
    except Exception as e:
        print(f"L·ªñI kh√¥ng x√°c ƒë·ªãnh khi ghi log DB: {e}")

# --- S·ª± ki·ªán Bot Discord ---
@client.event
async def on_ready():
    """S·ª± ki·ªán khi bot k·∫øt n·ªëi th√†nh c√¥ng."""
    print(f'ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi t∆∞ c√°ch {client.user.name} (ID: {client.user.id})')
    print('------')
    if not await setup_database():
        print("C·∫¢NH B√ÅO: Kh√¥ng th·ªÉ thi·∫øt l·∫≠p database. Log tin nh·∫Øn s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

    print("Bot ƒë√£ s·∫µn s√†ng!")
    if not ADMIN_USER_ID:
        print(">>> L∆ØU √ù: ADMIN_USER_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh, bot kh√¥ng th·ªÉ g·ª≠i DM th√¥ng b√°o! <<<")


@client.event
async def on_message(message: discord.Message):
    """S·ª± ki·ªán khi c√≥ tin nh·∫Øn m·ªõi."""
    # B·ªè qua tin nh·∫Øn t·ª´ bot ho·∫∑c DM
    if message.author.bot or message.guild is None:
        return

    # --- B∆Ø·ªöC 1: Ghi log g·ªëc v√†o DB (ch·∫°y n·ªÅn) ---
    asyncio.create_task(client.loop.run_in_executor(None, log_message_to_db_sync, message))

    # --- B∆Ø·ªöC 2: Ki·ªÉm tra T·ª´ kh√≥a v√† G·ª≠i DM cho Admin ---
    if ADMIN_USER_ID: # Ch·ªâ ch·∫°y n·∫øu ID Admin ƒë∆∞·ª£c c·∫•u h√¨nh
        content_lower = message.content.lower() # Chuy·ªÉn sang ch·ªØ th∆∞·ªùng ƒë·ªÉ ki·ªÉm tra
        found_keyword = None

        # Ki·ªÉm tra t·ª´ng t·ª´ kh√≥a
        for keyword in ALERT_KEYWORDS:
            if keyword in content_lower:
                found_keyword = keyword
                break # D·ª´ng l·∫°i ngay khi t√¨m th·∫•y m·ªôt t·ª´ kh√≥a

        # N·∫øu t√¨m th·∫•y t·ª´ kh√≥a
        if found_keyword:
            print(f"Ph√°t hi·ªán t·ª´ kh√≥a '{found_keyword}' trong tin nh·∫Øn t·ª´ {message.author}.")

            # L·∫•y ƒë·ªëi t∆∞·ª£ng User c·ªßa Admin
            admin_user = client.get_user(ADMIN_USER_ID)
            if not admin_user:
                try:
                    admin_user = await client.fetch_user(ADMIN_USER_ID)
                except discord.NotFound:
                    print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y Admin v·ªõi ID {ADMIN_USER_ID}.")
                    return
                except discord.HTTPException:
                     print(f"L·ªñI: L·ªói m·∫°ng khi fetch Admin ID {ADMIN_USER_ID}.")
                     return

            # T·∫°o n·ªôi dung DM
            dm_content = (
                f"**‚ÑπÔ∏è Ph√°t hi·ªán t·ª´ kh√≥a '{found_keyword}':**\n"
                f"üë§ **Ng∆∞·ªùi g·ª≠i:** {message.author.mention} (`{message.author}`)\n"
                f"üìå **K√™nh:** {message.channel.mention} (`#{message.channel.name}`)\n"
                f"üîó **Link:** {message.jump_url}\n"
                f"üí¨ **N·ªôi dung:**\n```\n{message.content}\n```"
            )

            # G·ª≠i DM cho Admin
            try:
                await admin_user.send(dm_content)
                print(f"ƒê√£ g·ª≠i DM th√¥ng b√°o t·ª´ kh√≥a cho Admin (ID: {ADMIN_USER_ID}).")
            except discord.Forbidden:
                print(f"L·ªñI: Kh√¥ng th·ªÉ g·ª≠i DM cho Admin (ID: {ADMIN_USER_ID}). Ki·ªÉm tra c√†i ƒë·∫∑t ch·∫∑n/DM.")
            except discord.HTTPException as e:
                 print(f"L·ªñI: L·ªói m·∫°ng khi g·ª≠i DM cho Admin: {e}")
            except Exception as e:
                print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i DM: {e}")



# --- H√†m Ch√≠nh ƒë·ªÉ Ch·∫°y Bot ---
async def main():
    if not TOKEN: print("L·ªñI: DISCORD_TOKEN ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t."); return
    if not ADMIN_USER_ID: print("C·∫¢NH B√ÅO: ADMIN_USER_ID ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t, kh√¥ng th·ªÉ g·ª≠i DM.");

    async with client:
        try:
            await client.start(TOKEN)
        except discord.errors.LoginFailure: print("L·ªñI: Token Discord kh√¥ng h·ª£p l·ªá.")
        except discord.errors.PrivilegedIntentsRequired: print("L·ªñI: Bot y√™u c·∫ßu Privileged Gateway Intent 'Message Content'.")
        except Exception as e: print(f"L·ªói nghi√™m tr·ªçng khi ch·∫°y bot: {e}")
        finally:
            print("ƒêang ƒë√≥ng k·∫øt n·ªëi database...")
            await close_database()

if __name__ == "__main__":
    print("ƒêang kh·ªüi ƒë·ªông bot...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nƒê√£ nh·∫≠n t√≠n hi·ªáu d·ª´ng (Ctrl+C). Bot ƒëang t·∫Øt...")
    finally:
        print("Bot ƒë√£ t·∫Øt.")