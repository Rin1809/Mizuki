# Mizuki/log_bot.py
import discord
import os
from dotenv import load_dotenv
import asyncio
import json
from datetime import datetime, timezone, timedelta 
from aiohttp import web

# --- T·∫£i bi·∫øn m√¥i tr∆∞·ªùng ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
ADMIN_USER_ID_STR = os.getenv('ADMIN_USER_ID', '873576591693873252')
MIZUKI_HTTP_PORT_STR = os.getenv('MIZUKI_HTTP_PORT', os.getenv('PORT', '8080')) # ∆Øu ti√™n PORT t·ª´ Railway
MIZUKI_EXPECTED_SECRET = os.getenv('MIZUKI_SHARED_SECRET', 'default_secret_key_for_mizuki')


# --- C·∫•u h√¨nh ch√≠nh ---
COMMAND_PREFIX = "!"
SHIROMI_COMMAND_PREFIX_REFERENCE = "Shi"

# --- Chuy·ªÉn ƒë·ªïi ID Admin & Port ---
ADMIN_USER_ID = None
if ADMIN_USER_ID_STR:
    try:
        ADMIN_USER_ID = int(ADMIN_USER_ID_STR)
        print(f"[CFG] ID Admin: {ADMIN_USER_ID}")
    except ValueError:
        print(f"[L·ªñI] ADMIN_USER_ID '{ADMIN_USER_ID_STR}' ko ph·∫£i s·ªë.")
        ADMIN_USER_ID = None
else:
    print("[L·ªñI] ADMIN_USER_ID ch∆∞a dc cfg.")

MIZUKI_HTTP_PORT = 8080 # Port m·∫∑c ƒë·ªãnh
try:
    MIZUKI_HTTP_PORT = int(MIZUKI_HTTP_PORT_STR)
except ValueError:
    print(f"[L·ªñI] MIZUKI_HTTP_PORT '{MIZUKI_HTTP_PORT_STR}' ko h·ª£p l·ªá. D√πng port m·∫∑c ƒë·ªãnh: {MIZUKI_HTTP_PORT}")


# --- Kh·ªüi t·∫°o Bot Discord ---
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
intents.dm_messages = True
intents.members = True

client = discord.Client(intents=intents)

# --- State cho AIOHTTP server ---
http_runner = None

# --- H√†m G·ª≠i DM An To√†n ---
async def send_dm_safe(user: discord.User | discord.DMChannel, content: str = None, embed: discord.Embed = None, context_log: str = "DM"):
    if not user:
        print(f"[DM CHECK][L·ªñI] Ng∆∞·ªùi nh·∫≠n ko h·ª£p l·ªá ({context_log}).")
        return
    target_channel : discord.abc.Messageable = None
    target_recipient_info = "Ko x√°c ƒë·ªãnh"
    try:
        if isinstance(user, discord.DMChannel):
            target_channel = user
            target_recipient_info = str(user.recipient) if user.recipient else "DM K√™nh"
        elif isinstance(user, (discord.User, discord.Member)): 
            target_recipient_info = str(user)
            if not user.dm_channel:
                target_channel = await user.create_dm()
            else:
                target_channel = user.dm_channel
        else:
            print(f"[DM CHECK][L·ªñI] Lo·∫°i ng∆∞·ªùi nh·∫≠n ko xƒë: {type(user)}")
            return

        if not target_channel:
            print(f"[DM CHECK][L·ªñI] Ko th·ªÉ xƒë k√™nh DM t·ªõi {target_recipient_info} ({context_log}).")
            return
        
        if embed:
            await target_channel.send(embed=embed)
            print(f"[DM CHECK] G·ª≠i EMBED {context_log} t·ªõi {target_recipient_info} th√†nh c√¥ng.")
            return 

        if content:
            if len(content) <= 2000:
                await target_channel.send(content)
            else: 
                chunks = [content[i:i + 1990] for i in range(0, len(content), 1990)]
                for i, chunk in enumerate(chunks):
                    await target_channel.send(f"**(Ph·∫ßn {i+1}/{len(chunks)})**\n{chunk}")
                    await asyncio.sleep(0.6)
            print(f"[DM CHECK] G·ª≠i TEXT {context_log} t·ªõi {target_recipient_info} th√†nh c√¥ng.")
        else:
            print(f"[DM CHECK][L·ªñI] Ko c√≥ content ho·∫∑c embed ƒë·ªÉ g·ª≠i {context_log} t·ªõi {target_recipient_info}.")

    except discord.Forbidden:
        print(f"[DM CHECK][L·ªñI] Ko c√≥ quy·ªÅn g·ª≠i {context_log} t·ªõi {target_recipient_info}.")
    except discord.HTTPException as e:
        print(f"[DM CHECK][L·ªñI] L·ªói HTTP {e.status} khi g·ª≠i {context_log}: {e.text}")
    except Exception as e:
        print(f"[DM CHECK][L·ªñI] G·ª≠i {context_log}: {e}")


# --- H√†m t√¨m k√™nh m·ª•c ti√™u ---
async def find_target_channel(specifier: str) -> discord.TextChannel | None:
    target_channel = None
    try: 
        channel_id = int(specifier)
        fetched_channel = client.get_channel(channel_id)
        if not fetched_channel:
            fetched_channel = await client.fetch_channel(channel_id)
        if isinstance(fetched_channel, discord.TextChannel):
            target_channel = fetched_channel
        else:
            target_channel = None 
    except ValueError: 
        found = False
        for guild in client.guilds:
            for channel_in_guild in guild.text_channels:
                if channel_in_guild.name.lower() == specifier.lower():
                    target_channel = channel_in_guild
                    found = True; break
            if found: break
        if not found: target_channel = None
    except discord.NotFound: target_channel = None
    except discord.Forbidden: target_channel = None
    except Exception: target_channel = None
    return target_channel

# --- HTTP Handler cho th√¥ng b√°o truy c·∫≠p ---
async def handle_notify_visit(request: web.Request):
    received_secret = request.headers.get("X-Mizuki-Secret")
    if MIZUKI_EXPECTED_SECRET and received_secret != MIZUKI_EXPECTED_SECRET:
        print("[HTTP NOTIFY][L·ªñI] Sai secret key. B·ªè qua.")
        return web.Response(text="Forbidden: Invalid secret", status=403)

    try:
        data = await request.json()
        ip = data.get("ip", "N/A")
        location = data.get("location", "Kh√¥ng r√µ")
        country = data.get("country", "N/A")
        city = data.get("city", "N/A")
        region = data.get("region", "N/A")
        isp = data.get("isp", "N/A")
        user_agent = data.get("userAgent", "N/A")
        timestamp_iso_utc = data.get("timestamp", datetime.now(timezone.utc).isoformat())

        # Chuy·ªÉn ISO string (m·∫∑c ƒë·ªãnh l√† UTC t·ª´ server) sang datetime object UTC
        try:
            dt_object_utc = datetime.fromisoformat(timestamp_iso_utc.replace('Z', '+00:00'))
        except ValueError: # N·∫øu parse l·ªói, d√πng tgian hi·ªán t·∫°i UTC
            dt_object_utc = datetime.now(timezone.utc)
        
        # T·∫°o timezone cho UTC+7 (TP.HCM)
        hcm_tz = timezone(timedelta(hours=7))
        # Chuy·ªÉn datetime object t·ª´ UTC sang UTC+7
        dt_object_hcm = dt_object_utc.astimezone(hcm_tz)
        
        # Format th·ªùi gian hi·ªÉn th·ªã theo m√∫i gi·ªù UTC+7
        timestamp_formatted_hcm = dt_object_hcm.strftime('%H:%M:%S %d/%m/%Y (GMT+7)')

        admin_user = await client.fetch_user(ADMIN_USER_ID)
        if admin_user:
            embed = discord.Embed(
                title="üåê C√≥ l∆∞·ª£t truy c·∫≠p website!",
                color=discord.Color.from_rgb(137, 180, 250), 
                # timestamp c·ªßa embed v·∫´n n√™n l√† UTC, Discord client s·∫Ω t·ª± hi·ªÉn th·ªã theo local c·ªßa ng∆∞·ªùi xem
                # Ho·∫∑c c√≥ th·ªÉ ƒë·∫∑t l√† dt_object_hcm n·∫øu mu·ªën timestamp c·ªßa embed c·ªë ƒë·ªãnh l√† gi·ªù HCM
                timestamp=dt_object_utc 
            )
            embed.add_field(name="üë§ IP", value=f"`{ip}`", inline=True)
            # Hi·ªÉn th·ªã th·ªùi gian ƒë√£ chuy·ªÉn ƒë·ªïi sang UTC+7
            embed.add_field(name="‚è∞ Th·ªùi gian (VN)", value=timestamp_formatted_hcm, inline=True) 
            embed.add_field(name="üìç V·ªã tr√≠ ∆∞·ªõc t√≠nh", value=location, inline=False)
            embed.add_field(name="üåç Qu·ªëc gia", value=country, inline=True)
            embed.add_field(name="üèôÔ∏è TP/V√πng", value=f"{city} / {region}", inline=True)
            embed.add_field(name="üì° ISP", value=isp, inline=True)
            embed.add_field(name="üñ•Ô∏è Thi·∫øt b·ªã", value=f"```{user_agent}```", inline=False)
            embed.set_footer(text="rin-personal-card | visit notification")

            await send_dm_safe(admin_user, embed=embed, context_log="Visit Notify")
            print(f"[HTTP NOTIFY] ƒê√£ g·ª≠i tb√°o visit cho Admin: IP {ip}, Time (HCM): {timestamp_formatted_hcm}")
        else:
            print(f"[HTTP NOTIFY][L·ªñI] Ko t√¨m th·∫•y Admin User ID: {ADMIN_USER_ID}")

        return web.Response(text="Notification received by Mizuki.", status=200)
    except json.JSONDecodeError:
        print("[HTTP NOTIFY][L·ªñI] D·ªØ li·ªáu POST ko ph·∫£i JSON.")
        return web.Response(text="Bad Request: Invalid JSON", status=400)
    except Exception as e:
        print(f"[HTTP NOTIFY][L·ªñI] X·ª≠ l√Ω tb√°o visit: {e}")
        return web.Response(text=f"Internal Server Error: {e}", status=500)

# --- H√†m kh·ªüi t·∫°o HTTP server  ---
async def setup_http_server():
    global http_runner 
    app = web.Application()
    app.router.add_post('/notify-visit', handle_notify_visit) 

    http_runner = web.AppRunner(app)
    await http_runner.setup()
    
    effective_port = int(os.getenv('PORT', MIZUKI_HTTP_PORT_STR))
    
    site = web.TCPSite(http_runner, '0.0.0.0', effective_port)
    await site.start()
    print(f"üåç Mizuki HTTP server ƒëang l·∫Øng nghe tr√™n port {effective_port}...")

# --- S·ª± ki·ªán Bot  ---
@client.event
async def on_ready():
    print(f'>>> ƒê√£ ƒëƒÉng nh·∫≠p: {client.user.name} ({client.user.id}) <<<')
    print("--- Mizuki ƒë∆°n gi·∫£n h√≥a ---")
    print(f"--- Prefix l·ªánh Mizuki: {COMMAND_PREFIX} ---")
    print(f"--- Prefix l·ªánh Shiromi (tham kh·∫£o): {SHIROMI_COMMAND_PREFIX_REFERENCE} ---")
    if not ADMIN_USER_ID:
        print(">>> L·ªñI NGHI√äM TR·ªåNG: ADMIN_USER_ID KO H·ª¢P L·ªÜ! Bot s·∫Ω ko h.ƒë·ªông. <<<")
    else:
        print(">>> Bot ƒë√£ s·∫µn s√†ng nh·∫≠n l·ªánh DM t·ª´ Admin! <<<")
        await setup_http_server()

@client.event
async def on_message(message: discord.Message):
    if not isinstance(message.channel, discord.DMChannel) or message.author.id != ADMIN_USER_ID:
        return 

    print(f"[DM NH·∫¨N] T·ª´ Admin ({ADMIN_USER_ID}): {message.content[:100]}...")

    if message.content.startswith(f"{COMMAND_PREFIX}shiromi_cmd"):
        print(f"[DM L·ªÜNH SHIROMI] Admin {ADMIN_USER_ID} g·ª≠i: {message.content}")
        try:
            parts = message.content[len(COMMAND_PREFIX) + len("shiromi_cmd"):].strip().split(maxsplit=1)
            if len(parts) < 2:
                await send_dm_safe(message.channel,
                                   f"‚ö†Ô∏è C√∫ ph√°p: `{COMMAND_PREFIX}shiromi_cmd <k√™nh_ID/t√™n> <l·ªánh_cho_Shiromi>`\n"
                                   f"*Ko c·∫ßn prefix Shiromi (`{SHIROMI_COMMAND_PREFIX_REFERENCE}`).*\n"
                                   f"Vd: `{COMMAND_PREFIX}shiromi_cmd general romi`",
                                   context_log="DM Shiromi Cmd Usage")
                return

            target_channel_specifier = parts[0]
            shiromi_command_to_send = parts[1] 

            target_channel = await find_target_channel(target_channel_specifier)

            if target_channel:
                try:
                    await target_channel.send(shiromi_command_to_send)
                    await send_dm_safe(message.channel,
                                       f"‚úÖ ƒê√£ g·ª≠i `{shiromi_command_to_send}` t·ªõi `#{target_channel.name}` (`{target_channel.guild.name}`).",
                                       context_log="DM Shiromi Cmd Success")
                except discord.Forbidden:
                    await send_dm_safe(message.channel, f"‚ùå Mizuki ko c√≥ quy·ªÅn g·ª≠i v√†o `#{target_channel.name}`.", context_log="DM Shiromi Cmd Perm Err")
                except discord.HTTPException as e_http:
                    await send_dm_safe(message.channel, f"‚ùå L·ªói HTTP g·ª≠i t·ªõi `#{target_channel.name}`: {e_http}", context_log="DM Shiromi Cmd HTTP Err")
            else:
                await send_dm_safe(message.channel, f"‚ö†Ô∏è Ko t√¨m th·∫•y k√™nh `{target_channel_specifier}`.", context_log="DM Shiromi Chan Not Found")
        except Exception as e:
            print(f"[L·ªñI DM L·ªÜNH SHIROMI] X·ª≠ l√Ω: {e}")
            await send_dm_safe(message.channel, f"üôÅ L·ªói x·ª≠ l√Ω l·ªánh Shiromi: {e}", context_log="DM Shiromi Cmd Unexpected Err")

    elif message.content.startswith(COMMAND_PREFIX):
        print(f"[DM L·ªÜNH G·ª¨I TH√î] Admin {ADMIN_USER_ID} g·ª≠i: {message.content}")
        try:
            parts = message.content[len(COMMAND_PREFIX):].strip().split(maxsplit=1)
            if len(parts) < 2:
                await send_dm_safe(message.channel, f"‚ö†Ô∏è C√∫ ph√°p: `{COMMAND_PREFIX}<k√™nh_ID/t√™n> <n·ªôi_dung>`\nVd: `{COMMAND_PREFIX}general Ch√†o!`", context_log="DM Send Raw Usage")
                return

            target_channel_specifier = parts[0]
            content_to_send = parts[1]

            target_channel = await find_target_channel(target_channel_specifier)

            if target_channel:
                try:
                    await target_channel.send(content_to_send)
                    await send_dm_safe(message.channel, f"‚úÖ ƒê√£ g·ª≠i t·ªõi `#{target_channel.name}` trong `{target_channel.guild.name}`.", context_log="DM Send Raw Success")
                except discord.Forbidden:
                    await send_dm_safe(message.channel, f"‚ùå Ko c√≥ quy·ªÅn g·ª≠i v√†o `#{target_channel.name}`.", context_log="DM Send Raw Perm Err")
                except discord.HTTPException as e:
                    await send_dm_safe(message.channel, f"‚ùå L·ªói HTTP g·ª≠i t·ªõi `#{target_channel.name}`: {e}", context_log="DM Send Raw HTTP Err")
            else:
                await send_dm_safe(message.channel, f"‚ö†Ô∏è Ko t√¨m th·∫•y k√™nh `{target_channel_specifier}`.", context_log="DM Send Raw Chan Not Found")
        except Exception as e:
            print(f"[L·ªñI DM L·ªÜNH G·ª¨I TH√î] X·ª≠ l√Ω: {e}")
            await send_dm_safe(message.channel, f"üôÅ L·ªói khi g·ª≠i tin: {e}", context_log="DM Send Raw Unexpected Err")

# --- H√†m ch·∫°y ch√≠nh ---
async def main():
    if not TOKEN:
        print("[L·ªñI] Thi·∫øu DISCORD_TOKEN.")
        return
    if not ADMIN_USER_ID:
        print("[L·ªñI] ADMIN_USER_ID ko h·ª£p l·ªá. Bot ko th·ªÉ h.ƒë·ªông.")
        return

    # Ch·∫°y client.start() nh∆∞ m·ªôt task n·ªÅn
    discord_client_task = asyncio.create_task(client.start(TOKEN))
    
    try:
        await discord_client_task 
    except discord.errors.LoginFailure: print("[L·ªñI] Token Discord ko h·ª£p l·ªá.")
    except discord.errors.PrivilegedIntentsRequired: print("[L·ªñI] Thi·∫øu quy·ªÅn Privileged Intents.")
    except discord.errors.ConnectionClosed as e: print(f"[L·ªñI] K·∫øt n·ªëi Discord b·ªã ƒë√≥ng: Code {e.code}, Reason: {e.reason}")
    except Exception as e:
        print(f"[L·ªñI NGHI√äM TR·ªåNG] Khi ch·∫°y bot: {type(e).__name__}: {e}")
    finally:
        print("[H.TH·ªêNG] Bot ƒëang t·∫Øt...")
        if http_runner: 
            await http_runner.cleanup() 
            print("[HTTP] Server ƒë√£ t·∫Øt.")
        if client and not client.is_closed(): 
            await client.close()
        print("[H.TH·ªêNG] Bot ƒë√£ t·∫Øt.")

if __name__ == "__main__":
    print("--- Kh·ªüi ƒë·ªông Bot Mizuki (Relay + G·ª≠i th√¥ + HTTP Visit Notify) ---")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n--- Nh·∫≠n t√≠n hi·ªáu d·ª´ng (Ctrl+C) ---")
    except Exception as e:
        print(f"\n[L·ªñI ASYNCIO/RUNTIME] L·ªói ko mong mu·ªën ·ªü c·∫•p cao nh·∫•t: {type(e).__name__}: {e}")
    finally:
        print("--- Ch∆∞∆°ng tr√¨nh k·∫øt th√∫c ---")
